# day11

flag 기법
==> 우리가 프로그램을 실행하다보면
	두가지 이상의 경우가 발생되는 순간이 존재한다.
	그 후에 어떤 경우가 발생했을지를 알아보는 기법
	
	예 ]
		
		for(){
			실행문...
			if(???){
				break;
			}
		}
		(1)
		==> 1) 부분은 for 명령이 정상적으로 종료된 후에 실행되는 부분이다.
		
		그런데 (1) 부분응 실행할 때 위의 반복문이 정상적으로 모두 반복한 후 실행하는지
		아니면 중간에 종료되서 실행이 되는지 알 수 없다.
		
		그것을 알아내기 위해서 사용하는 기법이다.
		
	방법 ]
		
		시작전에 변수를 하나 만들고 초기값 설정을 한다.
		특정 순간이 발생하면 변수의 데이터를 초기값에서 다른 데이터로 변경한다.
		
		결국
		(1) 부분을 실행할 때 변수의 데이터만 확인하면 
		위의 블럭이 정상적으로 모두 실행됬는지
		아니면 중간에 멈추고 (1) 부분을 실행하는지 알 수 있게된다.
		
===========================================================================================================================

스트림(Stream)
==>	자바는 외부장치와 데이터를 주고 받는 방법을 하나의 방법으로 통일시켜 놓았다.
	그것이 바로 Stream 이다.
	
	스트림은 
	쉽게 말해서 "빨대"라고 생각하면 된다.
	
	즉, 스트림을 데이터를 주고받는 외부장치에 꽂기만 하면
	나는 흡입만 하면( == 같은 함수를 이용하면 )
	외부장치의 데이터가 흘러들어오게 된다.
	
	참고 ]
		스트림은 단방향이다. 다시 말해 방향성이 있다.
		즉, 하나의 스트림은 데이터를 한방향으로만 보낼 수 있다.
		만약, 데이터를 주기도 하고 받기도 하려면
		두개의 스트림이 필요하다.
		
	
	스트림의 종류 ] - 방향성
		1. 프로그램으로 데이터가 들어오는 방향
			InputStream, Reader
		2. 프로그램에서 데이터가 나가는 방향
			OutputStream, Writer
			
	스트림의 종류 ]	- 데이터 양
		1. byte 단위(1 byte)
			InputStream, OutputStream
			==> 속도는 조금 느리다..... ( 기계어도 처리가 가능하다. )
		2. char 단위(2 byte)
			Reader, Writer
			==> 속도는 좀더 빠르다... ( 오직 문자만 처리가 가능하다. )
			
		참고 ]
			byte가 char 로 합쳐지는 순간 운영체제에 따라서 비트 순서가 바뀔 수 있다.
		
	스트림의 종류 ] - 상대방 종류
		1. 타겟 스트림(기본 스트림)
			==> 외부장치에 직접 연결된 스트림
		2. 필터 스트림(보조 스트림)
			==> 스트림의 성능 향상, 개발자의 편의를 위해서
				스트림에 연결되는 스트림
				
		참고 ]
			외부 장치에 연결할 때 반드시 기본 스트림은 존재해야 한다.
			필요에 따라서 필터 스트림을 연결해서 사용해야 한다.
			
---------------------------------------------------------------------------------------------------------------------------
* byte 기반 스트림

** 기본 스트림(타겟 스트림) **

1. InputStream
	
	기본 함수 ]
		
		int read()
			==> 오직 한 문자만(1 byte)만 읽어들이는 함수
				반환값은 읽은 문자
				
		int read(byte[] b)
			==> 여러바이트를 읽어들이는 함수
				읽은 결과는 byte[] b에 기억하게 되고
				반환값은 읽은 데이터의 갯수(바이트 수)
				
		int read(byte[] b, int off, int len)
			==> 여러바이트를 읽어들이는 함수
				다만, 배열의 지정한 위치부터 지정한 갯수 만큼만 읽어준다.
				반환갑은 읽은 데이터 갯수(바이트 수)
				
2. FileInputStream
==> 파일에 연결된 입력용 스트림

	생성방법 ]
		FileInputStream(String name)
		==> 스트림을 연결할 파일의 이름을 이용해서 스트림을 연결한다.
		
3. FileOutputStream
==> 파일로 연결된 보내는 방향의 스트림이다.

	기본 함수 ]
		void write(int b)
		==> 한글자만 내보내는 함수
		
		void write(byte[] b)
		==> 여러글자를 내보내는 함수
		
		void write(byte[] b, int off, int len)
		==> 여러글자를 내보내는 함수
			int off - 내보낼 시작위치
			int len - 내보낼 데이터 갯수
			

--------------------------------------------------------------------------------------------------------------------------

File
==> 스트림은 아니다.
	(데이터를 입력, 출력하는 기능이 없다.)
	다만 우리가 외부장치 중에서 가장 많이 사용하는 외부장치가
	파일이다보니.....
	그 파일에 대한 정보를 처리하기 위한 클래스이다.
	
	생성방법 ]
		
		File(String name)
		==> 파일의 경로와 이름을 지정해서 만든다.
		
		File(String parent, String child)
		==> 파일의 경로와 이름을 따로 지정해서 만든다.
		
		File(File parent, String child)
		==> 파일의 정보를 이용하고 파일의 이름만 다시 지정해서 만든다.
		
			참고  ]
				자바에서의 파일은 폴더 자체도 파일로 인정한다.
				예 ]
					File f = new File("c:\\");
				
		File(URI uri)
		==> 네트워크에서 다른 시스템에 있는 파일의 정보를 만든다.
	
		참고 함수 ]
			1. 정보를 알려주는 함수
				getName()		- 파일의 이름만 알려주는 함수
				getParent()		- 폴더의 이름만 알려주는 함수
				exists()		- 파일의 존재 여부를 알려주는 함수
				length()		- 파일의 크기를 알려주는 함수
				...
				
			2. 외부적인 작업을 하기 위한 함수
				==> 데이터 입출력 이외의 파일 전체에 대해서 필요한 작업을 할 수 있는 함수들...
				
					delete()	- 파일 삭제
					mkdir()		- 폴더 만들기(지정한 폴더 하나만 만든다.)
					mkdirs()	- 폴더 생성(계층으로 만들 수 있다. - 경로상 없는 폴더는 모두 만든다.)
					renameTo()	- 파일이름을 변경
					list()		- 폴더에 있는 파일의 목록을 구하는 함수
					...
					
					참고 ]
						
						파일 목록 알아내는 함수
							String[] list()		- 이름만 알려준다.
							File[] listFiles()	- 정보를 알려준다.
							
						필터링을 해서 리스트를 반환해주는 함수
						( 원하는 파일만 골라서 목록을 알려주는 함수 )
							String[] list(FilenameFilter filter)
							File[] listFiles(FileFilter filter)
							File[] listFiles(FilenameFilter filter)
						
--------------------------------------------------------------------------------------------------------------------------
*** byte 기반 보조스트림(필터 스트림) ***
==> 1. 기본스트림에 기능을 추가한다던지
	2. 사용자의 편의를 제공하기 위한
	보조적인 기능을 하는 스트림이다.
	
	주의 ]
		반드시 기본 스트림은 존재해야 하며
		필터 스트림은 필요에 따라서 연결해서 사용하면 된다.
		
	참고 ]
		필터 스트림 역시 방향성을 가지고 있다.
		반드시 같은 방향끼리만 연결해야 한다.
		

***
1. BufferedInputStream / BufferedOutputStream
	==> 사용자 편의기능은 없고
		대신 스트림의 성능을 향상시키는 역할 을 한다.
		버퍼에 데이터를 모았다가 한번에 처리하는 기능이 추가된 스트림이다.
		
	***
	flush()
	==> 강제로 버퍼를 비우는 함수
	
2. DataInputStream / DataOutputStream
	==> 많이 사용하는 스트림은 아니다.
		기능 향상은 없고
		대신 보통 스트림은 반드시 byte[] 로만 처리한다.
		문자 데이터가 아닌 다른 형태의 데이터는 문제가 있을 수 있다.
		==> 자바의 데이터형을 byte[]로 변환하지 않고
			직접 외부 장치로 입출력하는 기능을 추가한 것이다.
			
		잘 사용하지 않는 이유
			
			DataOutputStream을 이용해서 내보낸 데이터는
			반드시 DataInputStream으로만 받아야 한다.
			순서가 지켜져야 한다.
			( 저장할 때 int, float 내보내면 받을 때도 int, float의 순서대로 받아야 한다. )
			
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
3. PrintStream
==> 필터계열 스트림이다.
	사용자 편의성  + 기능 향상을 동시에 만들어 놓은 보조 스트림이다.
	
	기능 ]
		1. 내부적으로 Buffered 연결해 놓았다.
		2. 사용자 편의를 위해서 자바의 데이터 형태를 그대로 출력하도록 해 놨다.
		3. 파일과 직접 연결하도록 해 놓았다.
			( 내부적으로 기본 스트림을 만들어서 처리한다. )
			
	특징 ]
		쌍을 이루는 입력용 스트림이 없다.
		
==========================================================================================================================

* char(문자) 단위 스트림 *
==> 한번 입출력 할 때 2 바이트 단위로 입출력할 수 있는 스트림을 말한다.
	
	주의 ]
		기계어 상태의 내용은 절대로 문자단위로 입출력을 사용하면 안된다.
		이것은 오직 텍스트 문서에 한해서만 사용해야 한다.
		
		기계어 문서는 반드시 byte 단위의 입출력을 사용해야 한다.
		==>
			2바이트가 1char가 될 때 바이트의 순서가 바뀌기 때문에....
			
			예 ]
				가	- 	ㄱ : 0011		ㅏ : 0101 이라고 가정하면
				
				==> 	00110101	- X
						01010011	- O
						
	1. FileWrite / FileReader
	==> 파일에 직접 연결된 타겟 스트림(기본 스트림)
		단위는 문자(char)단위가 된다.
		
		내부적으로 char 단위로 처리한것만 변경되었다.
		
	2. 관련된 필터 클래스
		1) BufferedReader / BufferedWriter
			==> 중간에 버퍼 기능을 추가해서 스트림의 성능 향향을 위한 보조 스트림
			
			주요함수 ]
				char의 기본 함수에는 문열을 읽을 수 있는 함수가 없다.
				
				readLine()	==> 한줄 단위로 문자열을 그대로 읽어서 사용할 수 있는 함수
				
				주의 사항 ]
					이 함수는 줄 단위로 한 줄씩 읽는 함수이다.
					이 말은 줄 단위(\r\n)를 발견하면 그곳에서 읽는 것을 멈춘다는 말이된다.
					참고로 필요하면 줄단위를 강제로 추가해야 될 수 있다.
					
					이 함수는 줄단위는 꺼내오지 않는다.
					(즉, 줄 단위(\r\n) 까지 읽은 후 이 줄 단위 기호를 버린다.)
					
		2) PrintWriter
			==> 위에서 공부한 PrintStream처럼 필터스트림이고
				1. 버퍼기능을 가지고 있다.
				2. 직접 파일에 연결 할 수 있다.
				3. 사용자 편의를 추가했다.(자바의 데이터형을 그대로 출력한다.)
				
---------------------------------------------------------------------------------------------------------------------------
***
주의 사항	]
	스트림을 연결 할 때는 반드시
		1. 같은 방향끼리만 연결할 수 있다
		2. 같은 크기만 연결 할 수 있다.
			
			예 ]
				// byte 기반 타겟스트림
				FileInputStream fin = new FileInputStream("??????");
				// 문자기반 필터 스트림
				BufferedReader br = new BufferedReader(fin);
				==> 절대로 아니되옵니다.
				
	참고 스트림 ]
		
		InputStreamReader / OutputStreamReader
		==> 크기가 다른 두 개의 스트림을 연결할 때 사용하는 보조 트림이다.
		
			예 ]
				FileInputStream fin = new FileInputStream("???");
				InputStreamReader tmp = new InputStreamReader(fin);
				BufferedReader br = new BufferedReader(tmp);
				
			참고 ]
				타겟 스트림(기본 스트림)은 반드시 byte 기반 스트림이어야 연결된다.
							
==========================================================================================================================

객체 직렬화
==> 데이터는 자바의 기본형 이외에도 클래스 전체를 데이터로 
	상태방(외부장치)와 입출력할 수 있다.
	
	==> 이때 해당 객체 내의 함수는 제외되고
		그 클래스 안의 변수의 내용만 입출력이 된다.
		
		이처럼 클래스가 다른 장치에 전달되는 상태를
			"직렬화"
		라고 표현한다.
		
		참고 ]
			직렬화라고 표현하는 이유는
			클래스의 변수의 내용이 순서대로 입출력된다.
			라는 의미에서 붙여진 이름이다.
			
		***
		중요 ]
			아무클래스나 입출력되는 것은 아니고
			그 클래스가 반드시 직렬화 가능 클래스여야만 한다.
			이때 직렬화 가능 클래스는
				"Serializable"
			라는 인터페이스를 구현한 클래스이다.
			
		주의사항 ]
			직렬화는 변수의 내용만 입출력되므로
			네트워크 처럼 서로 떨어진 경우에는
			양쪽에 같은 클래스가 존재해야 한다.
			(왜냐하면 클래스 구조는 전달되지 않고 
				변수 내용만 전달 되기 때문에 
				양쪽 모두 클래스의 구조는 가지고 있어야 한다.)
			이때 양쪽에 있는 클래스는 
				클래스이름 + 패키지이름 + 클래스버젼...
			이 모두 동일해야 한다.
			
			
		이때 사용하는 보조 스트림
			ObjectInputStream / ObjectOutputStream
			==> 주로 네트워크에서 많이 사용되므로
				Reader / Writer 처럼 문자기반 스트림은 존재하지 않는다.
				
-----------------------------------------------------------------------------------------------------------------------

IO 공부는 
	필요한 데이터를 파일에 저장시킬 수 있고
	파일에 저장된 내용을 불러올 수 있도록 공부하시면 됩니다.
					
	
				
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			