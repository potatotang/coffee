# day13

스레드가 있는 프로그램의 종료
	일반적으로 스레드가 존재하지 않는 프로세스 프로그램은
	main() 함수가 종료되면 프로그램도 종료된다.
	
	하지만 스레드가 있는 프로그램은
		1. main() 함수도 종료가 되어야 하고
		2. 스레드도 종료가 되어야 한다.

1. 스레드를 강제로 종료하는 방법
	
	명령 ]
		stop();	
		==> 이 명령은 사용금지 명령이다.
		
		참고 ]
			자바측에서는 이 함수를 사용 금지 함수로 만들었다.
			대신 스레드를 종료하기 위해서는
			스레드가 스스로 종료되는 방향으로 프로그램을 제작해서
			프로그램이 종료될 수 있도록 처리하도록 한다.
			즉, run() 함수가 자연스럽게 종료되도록 해달라는 의미이다.
			
		참고 ]
			main()함수가 종료되면 프로세스 프로그램이 종료되듯이
			run() 함수가 종료되면 스레드 프로그램이 종료된다.
			
		처리방법 ]
			
			run()는 제어변수를 잉요해서 반복하도록 처리한다.
				
				private boolean isStart = true;
				
				while(isStart){
					내용
				}
			그리고 스레드가 종료될 필요가 있으면
			이 제어변수를 조작함으로써 run() 함수가 종료되도록 유도한다.
			
				setIsStart(false);
				
				==> day12.SleepTrd01, SleepTrd02 클래스 참고
				
		참고 ]
			한번 Death 된 스레드는 다시 실행되지 못한다.
			만약 재실행을 원하면
			NewBorn 상태부터 다시 시작해야 한다.

일시 중지하기
	suspend()
재실행하기
	resume()
		
---------------------------------------------------------------------------------------------------------------------------------
동기화 처리
==> 스레드의 장점은 메모리를 공유한다는 사실이다.
	그런데 이것이 매우 어려운 내용이다.
	왜냐하면 스레드가 어디까지 실행할지는 모르기 때문이다.
	
	동기화란?
	특정 스레드가 어디까지 실행할지를 묶어두는 기능을 동기화라고 이야기 할 수 있다.
	
	종류 ]
		1. 변수의 동기화
			==> 스레드가 특정 기능을 마칠때까지 그 변수를 
				다른 스레드가 사용하지 못하도록 막는 방법
				
			형식 ]
				synchronized(변수) {
				
				}
				
			의미 ]
				하나의 스레드가 블럭({})내의 내용을 모두 실행하는 도중에는
				다른 스레드는 이 변수를 사용하지 못하게 한다.
				
		2. 함수의 동기화
			==> 스레드가 특정 함수를 실행하는 도중에는
				다른 스레드는 그 함수를 사용하지 못하도록 방지하는 방법
				
			형식 ]
				synchronized 반환값 함수이름(매개변수리스느){
				}
				
			의미 ]
				하나의 스레드가 이 함수를 실행하는 도중에는
				다른 스레드가 이 함수를 사용할 수 없도록 해준다.
				
			참고 ]
				동기화는 항상 성립하는 것이 아니고
				두개 이상의 스레드가 변수나 함수를 공용으로 사용할 경우에만 성립하는 것이다.
				만약 두 스레드가 별개의 함수나 변수를 사용하면
				이것은 동기화 처리를 해도 영향을 받지 않는다.
				
				
	참고 ]
		두개 이상의 스레드를 만드는 것은
		두개가 같은 일을 할 수 있지만...
		대부분은 별도로 다른일을 동시에 하기 위해서 만들것이다.
		이때 서로가 공유 데이터가 존재하면 문제가 생길 수 있다.
		
		하지만 동기와의 문제점은
		한 스레드가 하나의 작업을 완료하기 전에는
		다른 스레드는 작업하지 못하고 대기해야 한다.
		이것은 정확하게 말하면 스레드가 효과가 없는 것과 같다.
		
		
		서로가 병행 처리를 하면서
		공유 데이터를 손상시키지 않도록 하는 방법
		
		규칙 ]
			1. 특정 스레드가 작업을 해서는 안될 시점이 되면
				스스로가 Block 상태로 전위되도록 한다.
					
					wait();
			2. 다른 스레드 입장에서는
				상대방 스레드가 일을 해도 좋은 시점이 되면 깨워준다.
				==> Runnable 상태로 전위 시킨다.
					
					notify();
					
			*****
			3. wait(), notify()는 반드시 동기화 함수 안에서만 사용해야 한다.
			
------------------------------------------------------------------------------------------------------------------------------
자기자신을 Block 상태로 만드는 방법
	
	1. sleep()
		==> 지정한 시간 동안 스스로 Block 상태로 만드는 명령
	2. join()			
		==> 다른 스레드가 종료되기 전까지는 스스로
			Block 상태로 만드는 명령
			
---------------------------------------------------------------------------------------------------------------------------------
Date 클래스
==> 날짜와 시간을 관리하는 클래스
	
	생성자 함수
		Data()
		==> 현재 시스템의 날짜와 시간을 이용해서 관리한다.
		
	참고 ]
		이 클래스는 Calendar 클래스가 버젼업 클래스이므로
		자바는 Calendar 클래스 사용을 권장한다.
		하지만 아직도 Date를 사용해야만 하는 함수가 존재한다.
		그래서 알고 있어야 한다.
		
Calendar 클래스
==> Date 클래스의 버젼업 클래스
	
	생성 방법 ]
		
		Calendar cal = new Calendar();			--------> X
		Calendar cal = Calendar.getInstance();	--------> O  	
		
	주요함수 ]
		
		get(int field);
		==> 필요한 정보를 알려주는 함수
			이 함수는 int field 에 알고자 하는 내용을 알려주면
			그 값에 대해서 알려주는 함수이다.
			
			참고 ]
				Calendar 클래스는 각각의 변수가 무엇을 알기 위한 변수인지를 공부하면 도움이 된다.
			
		getTime();
		==> Calendar 클래스를 Date 클래스로 변환해주는 함수
			
			실무에서는 Calendar 클래스를 이용해서 작업을 진행하다가
			필요한 순간에 Date 클래스로 변환해서 사용할 필요가 있다.
			
			예 ]
				
				Calendar cal = Calendar.getInstance();
				.....
				
				Date d = cal.getTime();
				==> 필요한 곳에 d 를 사용하면 된다.
				
----------------------------------------------------------------------------------------------------------------------------------
형식화 클래스
==> 주로 처리된 결과를 보기 좋게 출력하기 위한 목적으로 사용되어지는 클래스들...
	다시 말해서 문자열의 형식을 만들어 놓고 그 형식에 맞춰서 데이터를 문자열로 만들어주는 클래스들...
	
	1. DecimalFormat
		==> 처리 결과중 숫자를 보기 좋게 만들기 위한 클래스
		
		생성방법 ]
			DecimalFormat(String pattern) 을 주로 이용한다.
			==> 어떤 모양으로 숫자를 문자열로 변환시킬지 패턴을 알려주면서 만들어 준다.
			
		주요함수 ]
			format(double number)
			==> 숫자를 원하는 문자열로 변환시켜주는 함수
			
		참고 ]
			패턴 지정법
				
				0		한자리 숫자를 의미하고 무효숫자도 표시
				#		한자리 숫자를 의미하고 무효숫자는 표시하지 않는다.
				.		소숫점의 위치
				-		음수일 경우 - 부호의 위치를 알려준다.
						예 ]
							-123
							123-
				,		세자리마다 , 표시를 하도록한다.
				E		실수일 경우 지수 형태로 표시하도록 하낟.
				:		패턴을 구분한다.
						양수일 경우와 음수일 경우를 구분해서 처리할 경우 사용
				%		백분율
				\u00A4	화폐단위
	
	2. SimpleDateFormat
		==> 날짜데이터를 문자열로 변환해주는 클래스
		
	3. ChoiceFormat
		==> switch ~ case 등을 이용해야 하는 경우에 이것을 간소화 시키기 위한 방법
			특정 범위의 값은 특정 문자영로 교체해서 출력하는 기능을 가진 클래스
			
			생성방법 ]
				ChoiceFomat(double[] limits, String[] formats)
				
				double[] limits		: 치환될 범위
				String[] formats	: 치환할 문자
	
	4. MessageFormat
		==> 특정 문자열에 특정 위치에 내용만 변경되는 경우
			문자열 전체를 만들지 않고 변경되는 내용만 변화시켜서
			하나의 문자열을 만들어내는 클래스
				
		
		
		


























