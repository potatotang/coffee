# JDBC

JDBC
==> 
	자바 프로그램을 이용해서 데이터베이스를 컨트롤 할 수 있는 외부 API 이다.
	
	데이터베이스는 그 데이터베이스가 가진 DBMS에 의해서 성능이 결정된다.
	즉 이 말은 각각의 데이터베이스마다 질의명령을 처리하는 방법이 다르다는 것이다.
	개발자 입장에서 보면 
	데이터베이스마다 그 데이터베이스의 DBMS에 따라서 프로그램을 다르게 만들어야 한다는 것이다.
	
	해결방법으로
	자바 안에 DBMS를 만들어 놓고
	개발자는 자바의 DBMS에게만 명령을 내리도록 해 놓았다.
	( ==> 한가지 방식으로 처리할 수 있게 된 것이다. )
	자바 안에 있는 DBMS가 실제 데이터베이스와 연결해서 처리하도록 해 놓았다.
	
	이 문제를 해결하기 위한 자바 DBMS가 JDBC이다.
	
	우리는 JDBC에게만 명령을 내리면(한가지 방식으로 프로그램을 작성하면..)
	JDBC가 알아서 필요한 데이터베이스의 DBMS에게 명령을 전달하게 된다.
	
	참고 ]
		JDBC와 DBMS를 연결 하는 프로그램은
		해당 데이터베이스를 만든 회사에서 제공한다.
		
		
***
자바 개발자(데이터베이스 처리를 원하는)가 가장 먼저 해야할 일
	
	1. 사용하려는 데이터베이스와 JDBC를 연결하는 프로그램을 찾아내는 것이다.
		이 프로그램을 "JDBC Driver"라고 부른다.
		
	2. 찾아낸 외부 API를 이클립스에 등록해서 
		이클립스에서 이 외부 API를 사용할 수 있도록 조치를 해야한다.
		(외부 API 등록)
		
		1) 프로젝트에서 단축키(Alt + Enter)를 누르고 Properties 메뉴를 선택한다.
		2) 왼쪽창에서 Java Build Path 를 선택한다.
		3) 가운데 창에서 3번째 탭인 Libraries 를 선택한다.
		4) 오른쪽의 Add External JARs... 버튼을 클릭해서 다운로드한 드라이버를 선택한다.
		
참고 ]
	인터페이스로 구현된 이유
		==> 세션을 관리하는 방법이 각각의 DBMS마다 다르므로
			접속하는 순간 함수의 기능을
			거기에 맞도록 조절하기 위해서...
			
------------------------------------------------------------------------------------------------------------------------------------
JDBC 프로그래밍 순서
	0. JDBC Driver 를 구한다.
	1. 드라이버를 로딩한다.
		Class.forName()
	2. 데이터베이스에 접속한다.
		Connection con = DriverManage.getConnection();
================ 여기까지는 데이터베이스들 마다 약간씩 달라진다. =====================================================================
	3. JDBC와 실제 DBMS 사이에 명령을 전달 할 수 있는 도구를 만들어야 한다.
		( 오라클은 서버 데이터베이스이다.
			즉, 프로그램이 동작하는 컴퓨터와 데이터베이스가 있는 컴퓨터는 다를 수 있다.)
		
		사용하는 클래스(인터페이스)
			
			Statement
				
				만드는 방법 ]
					
					Statement stmt = con.createStatement();
					
				참고 ]
					질의명령을 실행하는 방법 (Statement에 질의 명령을 실어서 보내는 방법)
					
					1. execute(String sql)
						==> 질의 명령을 실행한 후 JDBC에게 보고하지 않는다.
							이것은 질의 실행이 되었는지를 알려주는 기능이 아니고
							데이터베이스가 JDBC에게 명령을 받았는지만 알려주는 기능이다.
							(반환값은 질의 실행 여부와 전혀 상관이 없다.)
							
							주로 실행여부와 관계없는 질의 명령
								create, insert, delete,....
					
					***	
					2. executeQuery(String sql)
						==> 반환값이 ResultSet 으로
							질의명령의 실행 결과 탄생하는 인라인테이블을
							관리하는 클래스이다.
							
							100% SELECT 질의명령에 사용된다.
					
					3. executeUpdate(String sql)
						==> 반환값이 int 인데
							이 반환값의 의미는 질의명령을 실행한 결과
							변화된 데이터의 갯수를 의미한다.
							
							예 ]
								UPDATE 명령을 실행했는데 몇개가 수정되었는지....
								DELETE 명령을 실행했는데 몇개가 삭제되었는지....
								
							주로 질의 명령의 실행 결과 여부를 판단해야 할 경우 사용하는 명령
								update, delete, insert
							
------------------------------------------------------------------------------------------------------------------------------------
				
			PreparedStatement
			==> 질의 명령을 데이터베이스에게 전달하는 Statement의 일종이다.
				
				Statement의 불편한 점
				==> 질의 명령을 실행할때마다 매번 질의 명령을 데이터베이스에게 전달하는 형식을 취한다.
					그런데 질의 명령이 긴 경우도 있다.
					데이터베이스는 네트워크를 사용하기 때문에 이때 문제가 생길 수 있다.
					
					이 문제점을 해결하기 위한 또다른 Statement를 제공하는데 PreparedStatement 이다.
					이것은 미리 질의 명령을 알려준 후 실행이 필요하면 실행만 해달라고 요구하면 되는 형식이다.
					즉, 매번 질의 명령을 알려줄 필요가 없다.
					
					우리가 작업을 하다보면 매번 같은 질의명령을 실행할 필요가 있을 것이다.
					그런데 일반 Statement는 매번 같은 질의명령이라도 다시 보내줘야 한다.
					이런경우 미리 질의명령을 알려주는 전속 Statement를 만들어 놓고
					질의명령은 보내지 말고 실행만 부탁한다면 처리속도가 그만큼 빨라지고
					코딩도 편할 것이다.
					
					
				만드는 방법 ]
					
					con.prepareStatement();
					
				참고 ]
					자주 사용하는 질의명령이라도 데이터는 달라질 수 있다.
					이때 사용하는 방법으로 질의 명령을 만들 때
					변화되는 데이터부분은 ? 로 대신한다.
					
					? 부분만 질의 명령을 실행하기 직전에 채워놓고
					질의 명령을 실행하는 방식이다.
					
					예 ]
						String sql = "SELECT * FROM emp WHERE ename = ?";
						
					주요함수 ]
						? 를 채워주는 함수
						
						setXXX(위치, 데이터);
						
						XXX는 채울 데이터의 형태에 따라서 선택한다.
						
						위치	: ? 의 위치, 1부터 시작
						데이터 	: 채울 데이터
						
						
	참고 ]
		Statement 는 속도는 느리지만
		매번 다른 질의명령을 처리할 수 있다.
		
		PreparedStatement 는 속도는 빠르지만
		항상 동일한 질의명령만 처리할 수 있다.
		
-----------------------------------------------------------------------------------------------
SELECT 질의 결과 사용하기
	
	jdbc에서 SELECT 질의명령을 던지면 
	그 결과(인라인테이블)를
	ResultSet이라는 인터페이스가 관리를 하도록 하고 있다.
	
	따라서 ResultSet 이라는 인터페이스를 이용해서
	인라인테이블의 결과중에서 필요한 데이터를 선택해서 사용할 수 있게된다.
	
	이때
		인라인테이블의 결과중 원하는 데이터를 꺼내는 방법은
		몇번째줄의 몇번째 칸의 데이터를 꺼내라가 아니다.
		
		현재 작업줄의 몇번째칸의 데이터를 꺼내라. 라는 방식으로 사용한다.
		(현재 작업줄 : 가상의 레코드 포인터라고 표현한다.)
		
	중요함수 ]
		
		1. 가상의 레코드 포인터( 현재 작업 위치)를 이동시켜야 한다.
			absolute(int row)
				==> 지정한 행으로 바로 이동
			
			afterLast()
				==> EOF(End Of File)로 이동
				
			beforeFirst()
				==> BOF(Begin Of File)로 이동
				
			first()
				==> 1번 행으로 이동
			last()
				==> 마지막 행으로 이동
				
				
			next()
				==> 현재 위치에서 다음 행으로 이동
				
			previous()
				==> 현재 위치에서 이전 행으로 이동
				
			주의 ]
				afterLast()
				beforeFirst()
				==> 항상 이동에 성공한다.
					왜냐하면 BOF, EOF는 인라이테이블이 탄생되면
					자바가 자동으로 만들어주는 가상의 위치이기 때문에
					항상 이동할 수 있다.
			
-----------------------------------------------------------------------------------------------
데이터를 꺼내는 함수
	
	getXXX()
	==> XXX는 꺼낼 데이터를 사용할 데이터형태 이름
		---> 실제 데이터베이스에 있는 형태가 아니고
			 그 데이터를 자바에서 사용하고 싶은 형태로 꺼내면 된다.
			 (데이터베이스에 있는 형태와 달라도 상관없다.)
			 
		예 ]
			나이를 꺼내고 싶다.
			나는 나이를 int로 사용하고 싶다.
				getInt();
				
			급여를 꺼내고 싶다.
			나는 이 급여를 실수 형태로꺼내고 싶다.
				getFloat()
				
		주의 ]
			꺼내는 방식
				1. getXXX(필드위치)
					==> 위치를 알려주는 방식
						Select 절에 나열한 위치
						자바는 인덱스(위치값)를 0부터 시작하지만
						JDBC 만큼은 인덱스를 1부터 시작한다.
						(<== 데이터베이스의 인덱스는 1부터 시작하니까...)
						
				2. getXXX(필드이름)
					==> 필드이름으로 알려주는 방식
						주의사항 ]
							만약 별칭으로 데이터를 조회한다면
							별칭으로 꺼내야 한다.
							
-----------------------------------------------------------------------------------------------
양방향 이동이 가능한 인라인테이블을 만드는 방법

==> Statement가 양방향 스테이트먼트가 되어야 한다.
	
	createStatement(int resultSetType, int resultSetConcurrency)
	
		int resultSetType
			ResultSet.TYPE_FORWARD_ONLY
			==> 기본값으로 전방향 인라인테이블을 만들어준다.
			
			
			양방향 인라인테이블을 만든다.
			ResultSet.TYPE_SCROLL_INSENSITIVE
			==> 변경된 사항을 적용시키지 않는 ResultSet을 만든다.
			resultSet.TYPE_SCROLL_SENSITIVE
			==> 변경된 사항을 적용시켜서 ....
			
		int resultSetConcurrency
			ResultSet.CONCUR_READ_ONLY
			==> ResultSet을 수정가능하게 하지 않는다.
			ResultSet.CONCUR_UPDATABLE
			==> ResultSet을 수정가능하게 해준다.

	사용예 ]
		Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);


















