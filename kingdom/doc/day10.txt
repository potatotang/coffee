# day10

Properties
==> Map의 역할을 하는 클래스이다.
	
	일반 Map과의 차이점은 
	파일(외부장치)을 이용해서 직접 데이터를 읽어서 
	Map처럼 저장할 수 있고
	Map에 저장된 데이터를 직접 외부장치(File)로 출력해서 저장할 수 있다.
	
	문제점 ]
		파일의 내용을 읽을 때 인코딩이 되지 않는다.
		==> 한글 파일의 경우 파일 자체에서 인코딩을 하지 않으면
			내용이 한글인 경우 한글이 깨져서 들어온다.
			
	참고 ]
		한글이 포함된 파일을 Properties에서 사용하기 위해서 인코딩 방법
		
		1. cmd 창을 연다.
		2. 환경변수와 Path는 설정이 되어있어야 한다.
		3. native2ascii 프로그램을 이용해서 인코딩 해준다.
			
			형식 ]
				
				native2ascii	인코딩안된파일	인코딩적용된저장할파일
				
	참고 ]
		Properties 클래스는 오직 String 으로만 키값과 데이터를 처리한다.
		
	참고 ]
		Properties는 이외에도 또 하나의 특징을 가지고 있는데
		현재 프로그램의 정보를 Map으로 자동 처리하는 기능을 가지고 있다.
		
----------------------------------------------------------------------------------------------------------------------
제너릭스(Generics)
==> 컬렉션은 모든 형태의 데이터를 다 입력받을 수 있다.
	(<== 데이터를 기억할 때 Object 타입으로 자동 형변환해서 기억하기 때문에...)
	그런데 실무에서 한가지 형태로 입력받는 것을 원칙으로 한다.
	그런데 꺼낼때는 항상 강제 형변환해서 꺼내야 한다.
	즉, 한가지 형태로 결정해서 데이터를 입력했는데
	꺼낼때는 자동으로 원래 형태로 꺼내지지가 않기 때문에
	항상 강제 형변환을 해줘야 한다.
	
	제너릭스란?
	==> 컬렉션에 입력하는 데이터를 미리 알려줌 으로써
		나중에 꺼낼때 좀 더 편하게(형변환 없이) 꺼낼 수 있도록 해주는 것.
		쉽게 말해서 기억하는 데이터의 타입을 미리 정해주는 것이다.
		
	형식 ]
		ArrayList<데이터타입> 변수이름 = new ArrayList<데이터타입>();
		
	참고 ]
		원칙은 반드시 컬렉션 마다 모두 제너릭스 선언을 해줘야 한다.
		
	참고 ]
		제너릭스는 전파되지 않는다.
		하나의 컬렉션이 제너릭스 선언이 되었더라도
		그 컬렉션을 이용하는 다른 컬렉션은 제너릭스를 잊어버린다.
		따라서
			새로운 컬렉션도 다시 제너릭스 선언을 해줘야 한다.
			
	참고 ]
		특수한 제너릭스
		원래 제너릭스는 특정 클래스만 입력 받을 목적으로 사용된다.
		
		형식 ]
			<? super 클래스이름>
				==> 클래스이름 포함 상위클래스 모두의 입력을 허락한다는 의미
			<? extends 클래스이름>
				==> 클래스이름 포함 하위클래스들을 모두 입력을 허락한다는 의미
				
			==> 이 방법은 제너릭스를 선언하지 않은것과 동일한 효과가 있을 수 있다.
				<== 나중에 꺼내서 사용할 때는 형변환 해줘야 하기 때문에...
				
===========================================================================================================================

어노테이션
==> 내부적으로 약속된 실행을 자동으로 처리하도록 하는 명령의 일종
	주로
		화면에 실제 보이는 실행이 아니고
		점검을 한다던지,
		선언적인 실행(이 클래스는 어떻게 작동하세요...)
		의 의미를 가진 명령을 말한다.
		
	형식 ]
		@명령
			 