# day12

스레드(Thread)
	
	자바가 프로그램을 실행하는 방법
		1. Process를 이용하는 방법
			==> 운영체제에 의해서 자신이 사용할 메모리를 할당받고
				레지스트리에 등록한 후 실행되는 방식
				
			단점 ]
				각각의 프로세스 프로그램은 
				원칙적으로 자신의 데이터를 다른 프로세스 프로그램에게 주지 못한다.
				(메모리끼리 서로 호환이 안된다.)
				
			우리가 이제까지 실행한 모든 자바 프로그램은 
			프로세스를 이용한 방식으로 실행이 됬었다.
			( main 함수부터 시작하는 프로그램은 프로세스 방식으로 실행된다. )
			
		2. Thread를 이용하는 방법
			==> 독립적으로 메모리를 할당받지 못하고 실행되는 프로그램이다.
				대신 프로세스 프로그램이 사용하는 메모리를 같이 공유하게 된다.
				
				참고 ]
					스레드는 혼자서는 실행되지 못한다.
					반드시 다른 프로세스가 실행된 후 실행되어야 한다.
					
				장점 ]
					스레드 프로그램은 메모리를 같이 사용하므로
					같은 메모리를 사용하는 프로그램끼리는 데이터 교환이 가능하다.
					
========================================================================================================================================

용어정리
1. 시분할 시스템
	==> CPU는 한 순간에는 오직 한개의 프로그램만 실행할 수 있다.
		하지만 여러개의 프로그램이 동시에 실행되기를 원한다면???
		한 찰라에는 한개의 프로그램만 실행하고
		적당한 시간이 되면 그 프로그램 보류하고
		다른 프로그램을 받아서 실행하도록 하고 있다.
		
		결론적으로
		각각의 프로그램마다 CPU가 실행할 시간을 정한 후
		그 시간만큼만 실행해준다.
		
2. 우선순위(Priority)
	==> CPU는 시분할 시스템에 의해서 특정 프로그램을 자신이 분배한 시간만큼 실행한다.
		시간이 종료되면 다음 프로그램을 실행하게 된다.
		이때 CPU가 다음 프로그램을 선택하는 기준을 
			우선순위(Priority)
		라고 부른다.
		
		따라서 
		우선순위가 높은 프로그램이 CPU에 의해서 먼저 실행되는 개념이다.
		
================================================================================================================================

자바에서 Thread 프로그램을 만드는 방법
	1. Thread 클래스를 상속 받아서 만드는 방법
		1) Thread 클래스를 상속 받아서 클래스를 제작한다.
		2) 그 클래스 안에 반드시 run() 함수를 오버라이드 해놓아야 한다.
			( 이 함수가 프로세스 방식의 main() 에 해당하는 것으로
				스레드 프로그램의 시작함수가 된다.)
		3) run() 함수부터 출발해서 그 프로그램이 하고자 하는 일을 코딩하면 된다.
		
	2. Runnable 인터페이스를 구현해서 만드는 방법
		1) Runnable 인터페이스를 구현한 클래스를 제작한다.
		2) 그 클래스안에 반드시 run() 함수를 오버라이드 해놓는다.
		( 이 함수가 프로세스방식의 main() 함수와 같은 역할을 하기 때문에...)
		3) run() 부터 출발해서 그 프로그램이 하고자 하는 일을 코딩하면 된다.
		
		
		참고 ]
			
			Runnable 상태
			==> CPU가 시분할 시스템에 의해서 프로그램을 선택할 때
				선택 가능한 프로그램이 모여있는 상태
				**
				참고 ]
					CPU는 Runnable 상태에 있는 프로그램만 실행할 수 있다.
					
				*****
				New Born 상태에 ------> Runnable 상태로 전위 시키는 명령
				
				start();
				
				참고 ]
					실행함수가 run() 함수이므로
					직접 run()을 호출하면 이것은 스레드 동작이 아니고
					프로세스의 일반 함수를 호출하는 효과가 된다.
					
			Run 상태
			==> CPU가 특정 프로그램을 실제로 실행하는 상태를 말한다.
				Run 상태에는 오직 한개의 프로그램만 들어갈 수 있다.
				그리고 
					Runnable ---> Run 상태로 전위는 오직 운영체제의 몫이다.(개발자가 손댈 수 없는 부분이다.)
					
				참고 ]
					Run ---> Runnable 상태로 전위는 
						1. 운영체제 몫이기도 하고
							(시분할 시스템에 의해서 시간이 만료된 시점)
						2. 개발자가 선택할 수 있다.
						
참고 ]
	스레드 프로그램이 필요한 이유
		1. 독립적으로 실행이 필요한 경우
			예 ]
				서버 프로그램에서는
				각각의 클라이언트와 통신하는 프로그램이 
				독립적으로 실행되어야 한다.
				즉, 클라이언트와 통신은 다른 작업과 별개로 
				독립적으로 실행되어야 할 필요가 있다.
				
		2. 백그라운드 작업이 필요한 경우
			예 ]
				1.
				그래픽처리를 할 때
				그림을 내부적으로 완성한 후
				메인은 완성된 그림만 이용하도록 하고자 하는 경우
				
				2. 
				채팅 프로그램에서
				파일은 전송 받는 경우
				전송작업은 백그라운드에서 독립적으로 실행되어야 한다.
				
========================================================================================================================================
스레드 프로그램을 동작시키는 방법
	
	1. Thread 클래스를 상속 받아서 만드는 경우
		1) new 시킨다.	==> New Born 상태가 된다.
		2) Runnable 상태로 전위시킨다. - start()
		
	2. Runnable 인터페이스를 구현해서 만드는 경우
		
		1) new 시킨다.	==> 일반 클래스를 사용하기위한 방법
		2) Thread 클래스를 new 시키면서 1)의 결과를 넣어준다.
			==> 이 순간 New Born 상태가 된다.
		3) 2)의 결과를 이용해서 start() 시킨다.
			==> 이순간 Runnable 상태가 된다.
			
참고 ]
	하나의 스레드 프로그램은 여러번 실행할 수 있다.
	그러면 이들은 각각 독립적으로 실행된다.
	즉, 하나의 스레드 처럼 여러개 프로그램이 실행되어진다.
	
	스레드에 부여된 이름은 
		
		String name = Thread.currentThread().getName();
	으로 받아서 사용할 수 있다.
	
======================================================================================================================================
1. Run	-----> Runnable 상태로 전위
	명령 : yield()
	
	참고 ]
		Block 상태란?
			실행을 잠시 중단하는 상태를 말한다.
			Block 상태에 있는 프로그램은 절대로 실행되지 않는다.
			(실행이 가능한 프로그램은 반드시 Runnable 상태여야만 한다.)
			그리고 Block 상태로 전위된것 뿐이다.
			즉, Block 상태에서 직접 Run 상태로 전위시킬 수 없다.
			
2. Run -----> Block 상태로 전위
	
	명령 : sleep()
			==> 이 명령은 시간을 정해주고
				그 시간이 되면 자동적으로 Runnable 상태로 복귀시키는 명령이다.
				
---------------------------------------------------------------------------------------------------------------------------------------
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		